import random
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon import TelegramClient

# ====== aiogram ======
API_TOKEN = '8269100824:AAHRKKLsu6ONuvVI7Znfo2gYaPSMvFIGE0E'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ====== Telethon ======
api_id = 20826736           
api_hash = 'a6f86b57c3a12acf9fe2865cc6fce1e1'    
channel = 'pure_cognitions_adhd'
telethon_client = TelegramClient('session_name', api_id, api_hash)

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton('üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –°–î–í–ì'))
keyboard.add(KeyboardButton('üíª –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω'))
keyboard.add(KeyboardButton('üíõ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))

# ====== –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ ======
def load_coworking():
    try:
        with open('coworking.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}
coworking_links = load_coworking()

# ====== –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ ======
async def fetch_latest_posts(limit=50):
    posts = []
    async with telethon_client:
        async for message in telethon_client.iter_messages(channel, limit=limit):
            if message.message:
                posts.append({
                    "id": message.id,
                    "text": message.message
                })
    return posts

# ====== –•–µ–Ω–¥–ª–µ—Ä—ã aiogram ======
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏—é:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –°–î–í–ì')
async def send_material(message: types.Message):
    posts = await fetch_latest_posts(limit=50)  # –ø–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤
    if posts:
        post = random.choice(posts)  # —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ –∫—É—Å–∫–∏ ‚â§4000 —Å–∏–º–≤–æ–ª–æ–≤
        text_chunks = [post["text"][i:i+4000] for i in range(0, len(post["text"]), 4000)]
        for chunk in text_chunks:
            await message.answer(chunk)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ üòî")

@dp.message_handler(lambda m: m.text == 'üíª –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω')
async def send_coworking_menu(message: types.Message):
    days_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for day in coworking_links.keys():
        days_keyboard.add(KeyboardButton(day))
    days_keyboard.add(KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=days_keyboard)

@dp.message_handler(lambda m: m.text in coworking_links.keys())
async def send_zoom_link(message: types.Message):
    link = coworking_links[message.text]
    await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ Zoom –¥–ª—è {message.text}: {link}")

@dp.message_handler(lambda m: m.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == 'üíõ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def send_support(message: types.Message):
    await message.answer("–° —Ç–æ–±–æ–π –≤—Å—ë —Ö–æ—Ä–æ—à–æ! üíõ")

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
